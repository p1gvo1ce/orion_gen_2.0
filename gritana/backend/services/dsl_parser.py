import re
import datetime


def parse_dsl(dsl_string: str):
    """
    –ü—Ä–µ–≤—Ä–∞—â–∞–µ—Ç —Å—Ç—Ä–æ–∫—É-–∑–∞–∫–ª–∏–Ω–∞–Ω–∏–µ –≤ SQL-–∑–∞–ø—Ä–æ—Å, –ø–æ–Ω—è—Ç–Ω—ã–π –º–∞—à–∏–Ω–µ.

    üïØ –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–µ –æ–±—Ä—è–¥—ã:
        - AND / OR / NOT ‚Äî –ª–æ–≥–∏—á–µ—Å–∫–∏–µ —Å–≤—è–∑–∫–∏ –¥–ª—è –ø–æ—Å—Ç—Ä–æ–µ–Ω–∏—è —Ü–µ–ø–µ–π –ø—Ä–æ–∫–ª—è—Ç–∏–π
        - level, module, source, process, version, event_run_id, message, timestamp ‚Äî –¥–æ–ø—É—Å—Ç–∏–º—ã–µ –ø–æ–ª—è –≤—ã–∑–æ–≤–∞
        - message ‚Äî –∏–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∏—Ä—É–µ—Ç—Å—è –∫–∞–∫ —Ä–µ–≥—É–ª—è—Ä–Ω–æ–µ –≤—ã—Ä–∞–∂–µ–Ω–∏–µ, –∏–±–æ —Ç–µ–∫—Å—Ç ‚Äî —ç—Ç–æ —Ç–µ–Ω—å —Å–º—ã—Å–ª–∞
        - timestamp ‚Äî –ø—Ä–∏–Ω–∏–º–∞–µ—Ç –∑–Ω–∞–∫–∏: >, <, >=, <=, –∏–±–æ –≤—Ä–µ–º—è ‚Äî –Ω–µ –ª–∏–Ω–µ–π–Ω–æ, –Ω–æ –ø–æ–¥–¥–∞—ë—Ç—Å—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—é

    üìú –ü—Ä–∏–º–µ—Ä—ã DSL-–∑–∞–∫–ª–∏–Ω–∞–Ω–∏–π:
        level:ERROR AND message:"fail.*int"
        source:discord AND process:discord_bot
        version:0.1 AND event_run_id:b66a4be0-19d1-4eab-899d-9f474495fda3
        NOT module:ai/logic.py AND timestamp:>2025-04-01T00:00:00

    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç:
        - where_clause (str) ‚Äî —á–∞—Å—Ç—å SQL-–∑–∞–ø—Ä–æ—Å–∞ –¥–ª—è –æ–±—Ä—è–¥–∞ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏
        - params (list) ‚Äî –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–ª—è –ø–æ–¥—Å—Ç–∞–Ω–æ–≤–∫–∏, –¥–∞–±—ã –Ω–µ —Ç—Ä–µ–≤–æ–∂–∏—Ç—å –±–æ–≥–æ–≤ –∏–Ω—ä–µ–∫—Ü–∏—è–º–∏
        - message_regex (str|None) ‚Äî —Ä–µ–≥—É–ª—è—Ä–∫–∞ –¥–ª—è —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏–π
    """

    dsl_string = dsl_string.replace("&&", "AND")
    dsl_string = dsl_string.replace("||", "OR")

    tokens = re.split(r'\s+(AND|OR|NOT)\s+', dsl_string.strip())
    sql_parts = []
    params = []
    message_regex = None

    for token in tokens:
        token = token.strip()
        if token in {"AND", "OR", "NOT"}:
            sql_parts.append(token)
            continue

        match = re.match(r'(\w+):([<>]=?|=)?(.*)', token)
        if not match:
            continue

        field, op, value = match.groups()
        field = field.strip()
        op = op.strip() if op else '='
        value = value.strip().strip('"')

        if field == "timestamp":
            try:
                dt = datetime.datetime.fromisoformat(value)
                timestamp = int(dt.timestamp() * 1000)
                sql_parts.append(f"timestamp {op} ?")
                params.append(timestamp)
            except ValueError:
                continue

        elif field == "message":
            # message —Ñ–∏–ª—å—Ç—Ä—É–µ—Ç—Å—è —Ä–µ–≥—É–ª—è—Ä–∫–æ–π, –∞ –Ω–µ SQL
            message_regex = value
            continue

        elif field in {"level", "module", "source", "process", "version", "event_run_id"}:
            sql_parts.append(f"{field} {op} ?")
            params.append(value)

        elif field == "context":
            # context —Ö—Ä–∞–Ω–∏—Ç—Å—è –∫–∞–∫ JSON-—Å—Ç—Ä–æ–∫–∞ ‚Üí LIKE '%value%'
            sql_parts.append("context LIKE ?")
            params.append(f"%{value}%")

    while sql_parts and sql_parts[-1] in {"AND", "OR", "NOT"}:
        sql_parts.pop()

    while sql_parts and sql_parts[0] in {"AND", "OR"}:
        sql_parts.pop(0)

    where_clause = " ".join(sql_parts)
    return where_clause, params, message_regex
